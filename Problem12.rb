# The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

# 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

# Let us list the factors of the first seven triangle numbers:

# 1: 1
# 3: 1,3
# 6: 1,2,3,6
# 10: 1,2,5,10
# 15: 1,3,5,15
# 21: 1,3,7,21
# 28: 1,2,4,7,14,28
# We can see that 28 is the first triangle number to have over five divisors.

# What is the value of the first triangle number to have over five hundred divisors?

given_max = 500 # given threshhold - look for a first triangle number having more divisors than given_max
curr = 1 # a curr'th triangular number we are looking at

#  Methods to find a triangle number using the formula
def triangle_number(n)
    return n * (n + 1) / 2  
end

# Method that uses the given_max to find the threshold, a number over 500 which will also be a count of the number of divisors
def largest_count(max)
  x = max + 1
  # we check every number greater than the given_max which will also be divisible by 48 - I found this number by looking at all the divisors count... 
  # I may try to come up with a nice code to find that for us. 
  while x > max
    if(x % 48 == 0)
      max = x
      return max
    else
      x += 1
    end
  end
end

# we are fininding the count of divisors of a triangle number
def find_factors(n)
  p = 1
  factors = 0
  # while the square of divisor is smaller than the triangle number 
  # we first need to see if a number is a divisor, and if so, then the square of the number would bring 2 factors
  # otherwise, it is just an increase of one factor
  while p*p <= n
    if (n % p == 0)
      if(p*p < n)
        factors += 2
      else
        factors += 1
      end
    end
    p += 1
  end
  return factors
end

curr = 1
number = triangle_number(curr)
max_divisors = largest_count(given_max)
# check which triangle number will first reach the required maximum number of divisors
while (find_factors(number) <= max_divisors) 
  if(find_factors(number) == max_divisors)
    break
  end
  curr += 1
  number = triangle_number(curr)
end
print "The mininum divisor number over ", given_max," is ", largest_count(given_max), ".\n"
print "The triangle number with ", max_divisors, " divisors is ", number, ".\n"




